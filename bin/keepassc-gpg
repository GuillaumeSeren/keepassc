#!/usr/bin/env python
import argparse
import sys
from os.path import expanduser, realpath, join
from getpass import getpass

from keepassc.helper import (get_passwordkey, get_filekey, get_key, 
                             transform_key)

import gnupg
from kppy import KPDB, KPError

__doc__ = """Create GPG-key for client/server use.

          The database key is used as passphrase

          """

def arg_parse():
    "Parse the command line arguments"
    parser = argparse.ArgumentParser()
    parser.add_argument('-k', '--keyfile', default=None,
                        help='Path to keyfile.', type=str)
    parser.add_argument('-c', '--client', default=False,
                        help='Key is used for client.', type=bool)
    parser.add_argument('-d', '--database', default=None,
                        help='Path to databse', type=str)
    return parser.parse_args()

args = arg_parse()

if args.client is True and args.keyfile is not None:
    print("Client can't use a keyfile!")
    sys.exit(1)
elif args.client is False:
    print("Leave blank if you use a keyfile only")

password = getpass()
if password == "":
    password = None

if args.client is False:
    if args.database is None:
        print("Need path to database")
        sys.exit(1)
    try:
        db = KPDB(realpath(expanduser(args.database)), password, args.keyfile)
    except KPError as err:
        print(err)
        sys.exit(1)

    seed1 = db._transf_randomseed
    seed2 = db._final_randomseed
    rounds = db._key_transf_rounds

    try:
        masterkey = get_key(db.password, db.keyfile)
        final_key = transform_key(masterkey, seed1,
                                  seed2, rounds)
    except TypeError as err:
        print(err)
        sys.exit(1)
    comment = db.filepath.split("/")[-1]
else:
    if password is None:
        print("A password is needed!")
        sys.exit(1)
    final_key = password
    comment = "client key"

print("This can take a while. Just do some random things to collect entropy.")
gpg = gnupg.GPG()
gpg.gen_key(gpg.gen_key_input(name_real = "Generated by KeePassC", name_comment = comment, passphrase = final_key))

