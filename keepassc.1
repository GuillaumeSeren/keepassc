.TH KeePassC v.1.5.5
.SH NAME
KeePassC \- KeePassC is a curses-based password manager compatible to KeePass v.1.x and KeePassX
.SH SYNOPSIS
keepassc [options]
.SH DESCRIPTION
KeePassC is a password manager fully compatible to KeePass v.1.x and KeePassX. That is, your password database is fully encrypted with AES.
.PP
KeePassC is written in Python 3 and comes with a curses-interface. It is completely controlled with the keyboard.
.PP
Actually KeePassC provides everything to read and edit the password databases. Watch http://raymontag.github.com/keepassc/ for a full feature list.
.SH OPTIONS
.TP
.B --asroot
Using the program as root user, what is not recommend because it makes core dumps easy.
.TP
.B -h, --help
Show help.
.TP
.B -d DATABASE, --database DATABASE
Path to a database file to open it directly.
.TP
.B -k KEYFILE, --keyfile KEYFILE
Path to keyfile.
.TP
.B -e ENTRY, --entry ENTRY
Print entry with parsed title. 
You will see a password promt; leave it blank if you only want to use a key-file. 
Just type a part of the entry title lower-case, it's case-insensitive and will search for matching string parts.

WARNING: Your passwords will be displayed directly on your command line!
.SH USAGE
For a short introduction have a look at http://raymontag.github.com/keepassc/docu.html.
.PP
You can get help at any time by pressing F1 in the file or database browser.
.SH USING TLS (formally SSL)
To use TLS when using keepassc-server you have to generate a server certificate. This is a manual how to do this:
.PP
First you need openssl. If you've installed it make a new directory to execute the following steps. Now lets generate the root certificate:
.TP
.B # openssl req -new -x509 -newkey rsa:4096 -keyout cakey.pem -out cacert.pem -days 3650
TLS works with an asymmetric cipher. Therefore you've to take care of cakey.pem (the private key)! Otherwise everybody could generate it's own certificates and could phish your passphrase credentials. A strong password for the private key is self-evident. The other fields are not necessary (for KeePassC. For other uses it could but that's not the topic). The last parameter specifies that the root certificate is valid for 10 years. You can change this if you need to.
.PP
To check if you could open the key do
.TP
.B # openssl rsa -in cakey.pem -noout -text
.PP
and type your password.
.PP
Now we generate the certificate for the server.
.TP
.B # openssl genrsa -out serverkey.pem -aes128 2048 -days 3650
.TP
.B # openssl rsa -in serverkey.pem -out serverkey.pem
Take care of serverkey.pem! It's a private key, too and with this key everybody could act as your server.
.PP
Now we'll sign this key with the root certificate.
.TP
.B # openssl req -new -key serverkey.pem -out req.pem -nodes
It is essential that you type "KeePassC Server" for "Common Name". Otherwise the client would never accept the server. Everything else is not necessary and could be empty.
.PP
Now change your openssl configuration:
.TP
.B /etc/ssl/openssl.cnf
dir = .

new_certs_dir = $dir

private_key = $dir/cakey.pem

RANDFILE = $dir/.rand

default_days = 3650

stateOrProvinceName = optional
.PP
Now do
.TP
.B # echo 01 > serial
.TP
.B # touch index.txt
Now we do the final step: We sign the certificate:
.TP
.B openssl ca -in req.pem -notext -out servercert.pem
You need to type the password of the root certificate.
.PP
To install the certificates move servercert.pem and serverkey.pem into .local/share/keepassc/ or any other directory specified by XDG_DATA_HOME with keepassc as subfolder on the server.
.PP
On the client side you move cacert.pem into the same folder. You're now ready to use TLS with KeePassC.
.SH AUTHOR
Karsten-Kai KÃ¶nig <kkoenig@posteo.de>
.SH LICENSE
 KeePassC is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or at your option) any later version.
.PP
KeePassC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
.PP
You should have received a copy of the GNU General Public License along with KeePassC. If not, see <http://www.gnu.org/licenses/ >. 
